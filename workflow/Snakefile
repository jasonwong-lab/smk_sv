import os


CALLERS = [
    "cutesv",
    "sniffles",
    "svim",
    "severus",
    "svision",
    "debreak",
    "delly",
    "nanosv",
    "nanovar",
]


MAPPERS = ["minimap2"]


# *--------------------------------------------------------------------------* #
# * Configuration                                                            * #
# *--------------------------------------------------------------------------* #
configfile: "../config/config.yaml"


pepfile: "../config/pep/config.yaml"


container: os.path.abspath("singularities/sv")


wildcard_constraints:
    sample="\w+",
    type_sv="\w+",
    caller="\w+",


workdir: config["dir_run"]


# *--------------------------------------------------------------------------* #
# * Define results to be retrieved                                           * #
# *--------------------------------------------------------------------------* #
rule all:
    input:
        output_required=expand(
            "survivor/{sample}/final/{sample}.{type_sv}.merged.vcf",
            sample=pep.sample_table["sample_name"],
            type_sv=config["type_sv"],
        ),


# *--------------------------------------------------------------------------* #
# * All included rules                                                       * #
# *--------------------------------------------------------------------------* #
if config["map_fastq"] and confg["mapper"] in MAPPERS:

    include: f"rules/mappers/{config['mapper']}.smk"


for caller in CALLERS:
    if caller in config["caller"] and config["caller"][caller]:

        include: f"rules/callers/{caller}.smk"


include: "rules/filter_sv.smk"
include: "rules/split_vcf.smk"
include: "rules/annotate_sv.smk"
include: "rules/merge_sv.smk"
include: "rules/extract_annotation.smk"
include: "rules/convert_annotation.smk"
include: "rules/filter_sv_annotation.smk"
include: "rules/merge_sv_final.smk"
