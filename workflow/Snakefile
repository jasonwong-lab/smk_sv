import os
import math
from snakemake.utils import validate

# *--------------------------------------------------------------------------* #
# * Configuration                                                            * #
# *--------------------------------------------------------------------------* #
configfile: "config/config.yaml"


# validate(config, "config/config.schema.json")


pepfile: "config/pep/config.yaml"


container: os.path.abspath("workflow/singularities/sv")


wildcard_constraints:
    sample="\w+",
    type_sv="\w+",
    caller="\w+",


if config["dir_run"]:

    workdir: config["dir_run"]


CALLERS = [
    "cutesv",
    "sniffles",
    "svim",
    "severus",
    "svision",
    "debreak",
    "delly",
    "nanosv",
    "nanovar",
]


MAPPERS = ["minimap2"]


SAMPLES = pep.sample_table["sample_name"]


NUMBER_SAMPLES = len(SAMPLES)


NUMBER_CALLERS = len(list(config["callers"].keys()))


# *--------------------------------------------------------------------------* #
# * Define results to be retrieved                                           * #
# *--------------------------------------------------------------------------* #
rule all:
    input:
        output_required=expand(
            "survivor/{sample}/final/{sample}.{type_sv}.merged.vcf",
            sample=SAMPLES,
            type_sv=config["types_sv"],
        ),


# *--------------------------------------------------------------------------* #
# * All included rules                                                       * #
# *--------------------------------------------------------------------------* #
mapper = list(config["mapper"].keys())[0]


if mapper in MAPPERS and config["mapper"][mapper]:

    include: f"rules/mappers/{mapper}.smk"


for caller in CALLERS:
    if caller in config["callers"] and config["callers"][caller]:

        include: f"rules/callers/{caller}.smk"


include: "rules/filter_sv.smk"
include: "rules/split_vcf.smk"
include: "rules/annotate_sv.smk"
include: "rules/merge_sv.smk"
include: "rules/extract_annotation.smk"
include: "rules/convert_annotation.smk"
include: "rules/filter_sv_annotation.smk"
include: "rules/merge_sv_final.smk"
